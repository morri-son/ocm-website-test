name: Markdown

on:
  push:
    branches:
      - main
    paths:
      - '**/*.md'
  pull_request:
    branches:
      - main
    paths:
      - '**/*.md'

jobs:
  markdown-lint:
    runs-on: ubuntu-latest
    name: Lint Markdown
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: DavidAnson/markdownlint-cli2-action@992badcdf24e3b8eb7e87ff9287fe931bcb00c6e # v20
        with:
          globs: '**/*.md'
          separator: ","
          config: .github/config/.markdownlint-cli2.yaml

  spellcheck:
    name: Spellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Spellcheck
        uses: rojopolis/spellcheck-github-actions@35a02bae020e6999c5c37fabaf447f2eb8822ca7 # v0
        with:
          config_path: .github/config/spellcheck.yml
          task_name: Markdown
  verify-links:
    name: Verify links
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Wait for Netlify Deploy Preview
        id: wait_for_preview
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "Waiting up to 10 minutes for Netlify deploy preview..."
          REPO="${{ github.repository }}"
          SHA="${{ github.event.pull_request.head.sha }}"

          timeout 600 bash -c '
            export GH_TOKEN
            while true; do
              echo "[DEBUG] Requesting check-suites from GitHub API..."
              SUITE_JSON=$(gh api repos/"$REPO"/commits/"$SHA"/check-suites 2>&1)
              EXIT_CODE=$?
              echo "[DEBUG] gh api exit code: $EXIT_CODE"
              echo "[DEBUG] SUITE_JSON: $SUITE_JSON"
              if [ $EXIT_CODE -ne 0 ]; then
                echo "[ERROR] gh api failed to fetch check-suites"
                sleep 5
                continue
              fi

              echo "[DEBUG] Filtering Netlify check suites with jq..."
              SUITES=$(echo "$SUITE_JSON" | jq "[ .check_suites[] | select(.app.slug == \"netlify\") ]" 2>&1)
              JQ_EXIT_CODE=$?
              echo "[DEBUG] jq exit code: $JQ_EXIT_CODE"
              echo "[DEBUG] SUITES: $SUITES"
              if [ $JQ_EXIT_CODE -ne 0 ]; then
                echo "[ERROR] jq failed to parse check-suites JSON"
                sleep 5
                continue
              fi

              SUITES_LEN=$(echo "$SUITES" | jq length 2>/dev/null || echo 0)
              echo "[DEBUG] SUITES_LEN: $SUITES_LEN"
              if [ "$SUITES_LEN" -eq 0 ]; then
                echo "[INFO] No Netlify check suite found yet"
                sleep 5
                continue
              fi

              SUITE_ID=$(echo "$SUITES" | jq -r ".[0].id" 2>&1)
              STATUS=$(echo "$SUITES" | jq -r ".[0].status" 2>&1)
              CONCLUSION=$(echo "$SUITES" | jq -r ".[0].conclusion" 2>&1)
              echo "[DEBUG] SUITE_ID: $SUITE_ID"
              echo "[DEBUG] STATUS: $STATUS"
              echo "[DEBUG] CONCLUSION: $CONCLUSION"

              echo "Netlify suite status: $STATUS, conclusion: $CONCLUSION"

              if [ "$STATUS" = "completed" ]; then
                if [[ "$CONCLUSION" = "success" || "$CONCLUSION" = "neutral" ]]; then
                  echo "[DEBUG] Fetching status for deploy preview URL..."
                  STATUS_JSON=$(gh api repos/"$REPO"/commits/"$SHA"/status 2>&1)
                  STATUS_EXIT_CODE=$?
                  echo "[DEBUG] gh api status exit code: $STATUS_EXIT_CODE"
                  echo "[DEBUG] STATUS_JSON: $STATUS_JSON"
                  if [ $STATUS_EXIT_CODE -ne 0 ]; then
                    echo "[ERROR] gh api failed to fetch status JSON"
                    exit 1
                  fi
                  PREVIEW_URL=$(echo "$STATUS_JSON" | jq -r ".statuses[] | select(.context==\"netlify/${REPO}/deploy-preview\") | .target_url" 2>&1)
                  PREVIEW_EXIT_CODE=$?
                  echo "[DEBUG] jq preview_url exit code: $PREVIEW_EXIT_CODE"
                  echo "[DEBUG] PREVIEW_URL: $PREVIEW_URL"
                  if [ $PREVIEW_EXIT_CODE -ne 0 ] || [ -z "$PREVIEW_URL" ] || [[ "$PREVIEW_URL" == *"null"* ]]; then
                    echo "[ERROR] Preview URL not found"
                    exit 1
                  fi
                  echo "✅ Deploy Preview ready: $PREVIEW_URL"
                  echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
                  exit 0
                else
                  echo "❌ Deploy failed: $CONCLUSION"
                  exit 1
                fi
              fi
              echo "[INFO] Still pending, sleeping 15s..."
              sleep 15
            done
          '

          EXIT_CODE=$?
          if [ $EXIT_CODE -eq 124 ]; then
            echo "❌ Timeout after 10 minutes"
            exit 1
          fi

      - name: Generate linkspector config
        # The linkspector config needs to be generated dynamically as
        # the action does not support passing the base URL as an environment variable.
        run: |
          cat > .github/config/linkspector.yaml << EOF
          dirs:
            - ./content
          baseUrl: "$BASEURL"
          ignorePatterns:
            - pattern: '/images/.*'
          EOF
          
          echo "Generated config:"
          cat .github/config/linkspector.yaml
        env:
          BASEURL: ${{ steps.wait_for_preview.outputs.preview_url }}
      - name: Run linkspector
        uses: umbrelladocs/action-linkspector@874d01cae9fd488e3077b08952093235bd626977 # v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-check
          fail_level: any
          config_file: .github/config/linkspector.yaml
          show_stats: true
        env:
          BASEURL: ${{ steps.wait_for_preview.outputs.preview_url }}
