name: Markdown

on:
  push:
    branches:
      - main
    paths:
      - '**/*.md'
  pull_request:
    branches:
      - main
    paths:
      - '**/*.md'

jobs:
  markdown-lint:
    runs-on: ubuntu-latest
    name: Lint Markdown
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: DavidAnson/markdownlint-cli2-action@992badcdf24e3b8eb7e87ff9287fe931bcb00c6e # v20
        with:
          globs: '**/*.md'
          separator: ","
          config: .github/config/.markdownlint-cli2.yaml

  spellcheck:
    name: Spellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Spellcheck
        uses: rojopolis/spellcheck-github-actions@35a02bae020e6999c5c37fabaf447f2eb8822ca7 # v0
        with:
          config_path: .github/config/spellcheck.yml
          task_name: Markdown

  verify-links:
    name: Verify links
    runs-on: ubuntu-latest
    steps:
      

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Wait for Netlify Deploy Preview
        id: wait_for_preview
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          
          echo "Waiting up to 8 minutes for Netlify deploy preview..."
          export REPO="${{ github.repository }}"
          export SHA="${{ github.event.pull_request.head.sha || github.sha }}"

          timeout 480 bash -c '
            set -euo pipefail
            
            # Function to get Netlify suite info with proper error handling
            get_netlify_suite() {
              local output
              
              if ! output=$(gh api repos/"$REPO"/commits/"$SHA"/check-suites 2>&1); then
                echo "API_ERROR: Failed to fetch check-suites: $output" >&2
                return 1
              fi
              
              local suite_info
              if ! suite_info=$(echo "$output" | jq -r ".check_suites[] | select(.app.slug == \"netlify\") | {id, status, conclusion}" 2>/dev/null); then
                echo "null"
                return 0
              fi
              
              if [ -z "$suite_info" ] || [ "$suite_info" = "null" ]; then
                echo "null"
              else
                echo "$suite_info"
              fi
            }
            
            # Function to get deploy preview URL with proper error handling
            get_preview_url() {
              local output
              local preview_url
              
              if ! output=$(gh api repos/"$REPO"/commits/"$SHA"/status 2>&1); then
                echo "API_ERROR: Failed to fetch status: $output" >&2
                return 1
              fi
              
              if ! preview_url=$(echo "$output" | jq -r ".statuses[] | select(.context==\"netlify/open-component-model/deploy-preview\") | .target_url" 2>/dev/null | head -1); then
                return 1
              fi
              
              if [ -n "$preview_url" ] && [ "$preview_url" != "null" ]; then
                echo "$preview_url"
              fi
            }
            
            INITIAL_WAIT=true
            API_ERROR_COUNT=0
            MAX_API_ERRORS=5
            
            while true; do
              # Reset pipefail for this iteration
              set +e
              SUITE_INFO=$(get_netlify_suite 2>&1)
              SUITE_EXIT_CODE=$?
              set -e
              
              # Handle API errors with exponential backoff
              if [ $SUITE_EXIT_CODE -ne 0 ] || [[ "$SUITE_INFO" == API_ERROR:* ]]; then
                API_ERROR_COUNT=$((API_ERROR_COUNT + 1))
                BACKOFF_TIME=$((API_ERROR_COUNT * 5))
                
                echo "⚠️  GitHub API error ($API_ERROR_COUNT/$MAX_API_ERRORS): ${SUITE_INFO#API_ERROR: }"
                
                if [ $API_ERROR_COUNT -ge $MAX_API_ERRORS ]; then
                  echo "❌ Too many API errors, giving up"
                  exit 1
                fi
                
                echo "🔄 Retrying in ${BACKOFF_TIME}s..."
                sleep $BACKOFF_TIME
                continue
              fi
              
              # Reset error count on successful API call
              API_ERROR_COUNT=0

              if [ "$SUITE_INFO" = "null" ] || [ -z "$SUITE_INFO" ]; then
                if [ "$INITIAL_WAIT" = "true" ]; then
                  echo "⏳ Waiting for Netlify to start deployment..."
                  INITIAL_WAIT=false
                fi
                sleep 3
                continue
              fi

              # Parse suite info safely
              if ! STATUS=$(echo "$SUITE_INFO" | jq -r ".status" 2>/dev/null); then
                echo "⚠️  Failed to parse suite status, retrying..."
                sleep 3
                continue
              fi
              
              if ! CONCLUSION=$(echo "$SUITE_INFO" | jq -r ".conclusion" 2>/dev/null); then
                echo "⚠️  Failed to parse suite conclusion, retrying..."
                sleep 3
                continue
              fi
              
              case "$STATUS" in
                "queued")
                  echo "📋 Netlify deployment queued..."
                  sleep 5
                  ;;
                "in_progress")
                  echo "🔄 Netlify deployment in progress..."
                  sleep 8
                  ;;
                "completed")
                  case "$CONCLUSION" in
                    "success"|"neutral")
                      # Handle URL retrieval with error handling
                      set +e
                      PREVIEW_URL=$(get_preview_url 2>&1)
                      URL_EXIT_CODE=$?
                      set -e
                      
                      if [ $URL_EXIT_CODE -ne 0 ] || [[ "$PREVIEW_URL" == API_ERROR:* ]]; then
                        echo "⚠️  Failed to get preview URL: ${PREVIEW_URL#API_ERROR: }, retrying..."
                        sleep 3
                        continue
                      fi
                      
                      if [ -n "$PREVIEW_URL" ] && [ "$PREVIEW_URL" != "null" ]; then
                        echo "✅ Deploy Preview ready: $PREVIEW_URL"
                        echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
                        exit 0
                      else
                        echo "⚠️  Deploy completed but no preview URL found, retrying..."
                        sleep 3
                      fi
                      ;;
                    "failure"|"cancelled")
                      echo "❌ Netlify deployment failed: $CONCLUSION"
                      exit 1
                      ;;
                    *)
                      echo "⚠️  Unknown conclusion: $CONCLUSION, retrying..."
                      sleep 5
                      ;;
                  esac
                  ;;
                *)
                  echo "⚠️  Unknown status: $STATUS, retrying..."
                  sleep 5
                  ;;
              esac
            done
          '

          EXIT_CODE=$?
          if [ $EXIT_CODE -eq 124 ]; then
            echo "❌ Timeout after 8 minutes - Netlify deployment took too long"
            exit 1
          elif [ $EXIT_CODE -ne 0 ]; then
            echo "❌ Failed to get Netlify deployment status"
            exit 1
          fi

      - name: Generate linkspector config
        # The linkspector config needs to be generated dynamically as
        # the action does not support passing the base URL as an environment variable.
        run: |
          cat > .github/config/linkspector.yaml << EOF
          dirs:
            - ./content
          baseUrl: "$BASEURL"
          ignorePatterns:
            - pattern: '/images/.*'
          EOF
          echo "Generated config:"
          cat .github/config/linkspector.yaml
        env:
          BASEURL: ${{ steps.wait_for_preview.outputs.preview_url }}

      - name: Run linkspector
        uses: umbrelladocs/action-linkspector@874d01cae9fd488e3077b08952093235bd626977 # v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-check
          fail_level: any
          config_file: .github/config/linkspector.yaml
          show_stats: true
        env:
          BASEURL: ${{ steps.wait_for_preview.outputs.preview_url }}
